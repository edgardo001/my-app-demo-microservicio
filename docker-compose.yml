#docker-compose.yml

#Para solo crear la imagen:
# $> docker-compose build

#Para crear imagen e iniciar un nuevo contenedor: 
# $> docker-compose up -d

#Para reiniciar: 
# $> docker-compose restart

#Para remover contenedor, red interna y volumenes: 
# $> docker-compose down
#Para remover las imagenes creadas:
# $> docker rmi -f api-rest-hapi:1.0 app-react:1.0

#Ver salida de Docker-Compose:
# $> docker-compose logs -f -t

#Ver Docker-Compose en ejecuciÃ³n:
# $> docker-compose ps

#Ejecutar un comando en un conenedor de docker-compose:
# $> docker-compose exec <nombre-servicio> /bin/bash

#Para la creacion del contenedor se usara el nombre de la carpeta que contiene el "docker-compose.yml"
version: '3.7' #Version de script docker-compose

services:
  webapp: #nombre que se le da por default al contenedor  
    build:
      context: .
      dockerfile: Dockerfile-app-react.dockerfile #nombre que se de dara al dockerfile
    image: app-react:1.0  #Nombre que llevara la imagen (nombre:version) 
    ports:
      - 5000:5000 #Redirecciono los puertos fisicos al contenedor (port_fisico:port_contenedor)  
    container_name: app-react-container #nombre que llevara el contenedor creado
    deploy:
      restart_policy:
        condition: on-failure
  apirest: #nombre que se le da por default al   
    build:
      context: .
      dockerfile: Dockerfile-api-rest-hapi.dockerfile #nombre que se de dara al dockerfile 
    image: api-rest-hapi:1.0  #Nombre que llevara la imagen (nombre:version)
    ports:
      - 3000:3000 #Redirecciono los puertos fisicos al contenedor (port_fisico:port_contenedor)
    environment:
      - PORT=3000
    container_name: api-rest-hapi-container #nombre que llevara el contenedor creado
    deploy:
      restart_policy:
        condition: on-failure
      